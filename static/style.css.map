{"version":3,"sources":["_reset.scss","_config.scss","_base.scss","_utilitaires.scss","_blocs.scss","_exceptions.scss"],"names":[],"mappings":"AACA,iBAGI,sBAIJ,2CAUI,SAIJ,4BAEI,gBAIJ,kBACI,uBAIJ,KACI,gBAAA,CACA,4BAAA,CACA,gBAIJ,eACI,8BAIJ,YAEI,cAAA,CACA,cAIJ,6BAII,aAIJ,uCACI,kBACI,qBAGJ,iBAGI,kCAAA,CACA,qCAAA,CACA,mCAAA,CACA,gCC9DR,MACI,iBAAA,CACA,WAAA,CACA,2EAAA,CACA,aAAA,CACA,0GAIJ,oBACI,GACI,uBAGJ,GACI,yBAIR,iBACI,GACI,2BAAA,CACA,uBAAA,CACA,oBAGJ,GACI,2BAAA,CACA,uBAAA,CACA,qBCnCR,KACI,eAMJ,KACI,gBAAA,CACA,+BAAA,CACA,4BAAA,CACA,iBAAA,CACA,YAKJ,KACI,YAAA,CACA,mBAKJ,MACI,aAMJ,SACI,iBAAA,CACA,gBAMJ,QACI,YAAA,CACA,WAAA,CAEA,gBAAA,CACA,YAMJ,iBARI,kBAQJ,SAII,0BAAA,CACA,4BAAA,CACA,oCAKJ,GACI,iBAGJ,GACI,iBAKJ,OACI,YAAA,CACA,6BAAA,CACA,4BAAA,CACA,aAGJ,OACI,yBAAA,CACA,YAAA,CACA,gBAAA,CACA,kBAIJ,OACI,sBAAA,CACA,WAAA,CACA,qBAAA,CACA,iBAAA,CACA,gBAMJ,gBACI,UAAA,CACA,WAAA,CACA,iBCnGJ,UACI,gBAIJ,UACI,+BCRJ,SACI,YAAA,CAGA,yDAAA,CAGA,YAAA,CACA,0BAAA,CACA,eAAA,CACA,WAAA,CACA,YAAA,CAGA,kBAKJ,iBACI,kCAAA,CACA,eAKJ,OACI,UAAA,CACA,WAAA,CACA,iBAIJ,SACI,YAAA,CACA,WAAA,CACA,iBAAA,CACA,2BAMJ,gBACI,yBAAA,CACA,gCAMJ,gBACI,eAAA,CACA,WAAA,CACA,cAAA,CACA,cAAA,CACA,8CAMJ,WACI,iBAAA,CACA,KAAA,CACA,MAAA,CACA,QAAA,CACA,OAAA,CACA,WAAA,CACA,YCnEJ,qBACI,aAGJ,oBACI,gBAGJ,qBACI,UAGJ,oBACI","file":"style.css","sourceRoot":"../scss","sourcesContent":["/* Box sizing rules */\n*,\n*::before,\n*::after {\n    box-sizing: border-box;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n    margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role='list'],\nol[role='list'] {\n    list-style: none;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n    scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n    min-height: 100vh;\n    text-rendering: optimizeSpeed;\n    line-height: 1.5;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n    text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture {\n    max-width: 100%;\n    display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n    font: inherit;\n}\n\n/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n    html:focus-within {\n        scroll-behavior: auto;\n    }\n\n    *,\n    *::before,\n    *::after {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n        scroll-behavior: auto !important;\n    }\n}","// Ici on définit deux choses :\n// 1. Nos variables ou custom properties, qui sont essentiellement des couleurs.\n// 2. Nos animations via @keyframes\n// Le but est de réutiliser ces variables et animations plusieurs fois et de toujours savoir où elles sont\n\n\n// A noter : --gradient contient un dégradé de couleur arc en ciel allant vers le haut à droite.\n// A noter : afin d'avoir une typographie plus cohérente avec le système d'exploitation du joueur, on peut demander\n// au css de prendre une font disponible sur son ordinateur.\n:root {\n    --background: white;\n    --text: black;\n    --gradient: linear-gradient(to right top, orange, yellow, green, cyan, blue, violet);\n    --border: black;\n    --system-fonts: -apple-system, system-ui, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica Neue, Arial, sans-serif;\n}\n\n\n@keyframes rotation {\n    0% {\n        transform: rotate(0deg);\n    }\n\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\n@keyframes pulse {\n    0% {\n        -webkit-transform: scale(0.5);\n        -ms-transform: scale(0.5);\n        transform: scale(0.5);\n    }\n\n    100% {\n        -webkit-transform: scale(0.9);\n        -ms-transform: scale(0.9);\n        transform: scale(0.9);\n    }\n\n}","// Ici on donne un style de base à notre jeu.\n\n// On définit une font-size de 10px de base afin d'avoir un multiplicateur de 10 pour les valeurs en REM.\nhtml {\n    font-size: 10px;\n}\n\n// On définit une taille de 1.6 rem. 1.6 x 10px = 16px.\n// 16 pixels de taille de texte est la taille de base dans les navigateurs et il est conseillé de la respecter.\n// On applique aussi quelques couleurs.\nbody {\n    font-size: 1.6rem;\n    font-family: var(--system-fonts);\n    background: var(--background);\n    color: var(--text);\n    margin: auto;\n}\n\n// Le main contient notre jeu et le tableau des scores.\n// On les mets l'un à coté de l'autre via flex, mais on permet qu'ils se chevauchent sur mobile via row wrap.\nmain {\n    display: flex;\n    flex-flow: row wrap;\n}\n\n// Aside indique un élément secondaire en rapport avec l'élément principal. Il est donc parfait pour les scores\n// des joueurs.\naside {\n    padding: 20px;\n}\n\n// La liste des scores des joueurs peut devenir longue après plusieurs parties.\n// On utilise donc un overflow-y et une taille fixe en hauteur pour créer une liste à scroller.\n// vh signifie Viewport Height. Le but est que la liste fasse 50% de la hauteur du navigateur.\naside ol {\n    overflow-y: scroll;\n    max-height: 50vh;\n}\n\n// Si on devait enlever tout ce qui est secondaire dans la page, ce qui devrait rester doit être dans article.\n// C'est tout naturellement qu'on y met donc le jeu en lui-même.\n// Notons le flex-grow : on autorise article à grandir au détriment de aside, article ayant besoin de plus de place.\narticle {\n    padding: 20px;\n    flex-grow: 1;\n    text-align: center;\n    max-width: 1080px;\n    margin: auto;\n}\n\n// On définit un style pour nos titres\n// On leur ajouter un dégradé via background et la custom property --gradient\n// On utilise background-clip et text-fill color pour que le texte prenne comme couleur notre background\nh1,\nh2,\nh3 {\n    text-align: center;\n    background: var(--gradient);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n}\n\n// La taille des titres et aussi en REM.\n// 10px x 4.2rem = 42pixels.\nh1 {\n    font-size: 4.2rem;\n}\n\nh2 {\n    font-size: 3.6rem;\n}\n\n// Le header contient deux éléments : le titre et le bouton pour la musique.\n// On veut les mettre chacun d'un côté, et flex avec space-between est tout à fait adapté.\nheader {\n    display: flex;\n    justify-content: space-between;\n    border-bottom: 1px solid grey;\n    padding: 20px;\n}\n\nfooter {\n    border-top: 1px solid grey;\n    padding: 20px;\n    font-size: 1.6rem;\n    text-align: center;\n}\n\n// Bien qu'il n'y ait qu'un seul bouton dans le jeu, il vaut mieux styliser le bouton ici\nbutton {\n    background: transparent;\n    padding: 5px;\n    border: 2px solid black;\n    border-radius: 4px;\n    font-weight: 600;\n}\n\n// Progress est un élément HTML méconnu mais pratique.\n// Son principal défaut et qu'il est difficile à styliser.\n// On va donc se contenter de changer sa taille.\nprogress[value] {\n    width: 100%;\n    height: 20px;\n    max-width: 1260px;\n}","// Cette classe est extrêmement pratique !\n// Au lieu de mettre un margin sur chacun des éléments de notre jeu, il vaut mieux avoir une unique classe qui l'ajoute.\n// Ici cette combinaison signifie : s'il y a deux éléments enfants, ajouter une marge en haut sur le second élément.\n// Ce faisant, le premier élément n'en a pas, mais les suivants oui !\n.flow>*+* {\n    margin-top: 20px;\n}\n\n// Une classe permettant d'appliquer l'animation de rotation que nous avons défini dans /config.scss.\n.rotation {\n    animation: rotation 2s infinite;\n}","// Le tableau de jeu est l'élément central du site car il reçoit les cartes que le joueur va tenter de retourner.\n// On utilise CSS Grid pour créer la grille de cartes.\n.tableau {\n    display: grid;\n    // Comme on ne sait pas combien de cartes on va avoir, on demande au CSS de créer autant de colonnes qu'il souhaite\n    // Mais on lui donne des règles : chaque carte doit faire au minimum 100px et au maximum une fraction\n    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\n    // Au lieu de mettre une bordure sur chaque carte, on utilise grid-gap afin de créer un écart entre elles\n    // Et on ajouter un dégradé en background pour donner l'illusion.\n    grid-gap: 1px;\n    background: var(--gradient);\n    min-width: 280px;\n    margin: auto;\n    padding: 20px;\n    // On demande à ce tableau d'être en position relative afin de servir de point d'ancrage à de potentiels éléments\n    // qui seraient positionnés de manière absolue.\n    position: relative;\n}\n\n// Ici on applique une couleur de base sur les cartes afin de les différencier du fond\n// On ajouter cursor:pointer pour que la souris indique que la zone est cliquable\n.conteneur-carte {\n    background-color: var(--background);\n    cursor: pointer;\n}\n\n// On demande à l'image de faire 100% de son conteneur\n// Si le conteneur n'a pas les même proportions que l'image, object-fit cover se chargera de remplir la case\n.carte {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n}\n\n// Ici on ajoute un background à notre image d'accueil. Mais pourquoi ?\n.accueil {\n    padding: 20px;\n    margin: auto;\n    text-align: center;\n    background: var(--gradient);\n}\n\n// Parce qu'on veut \"teinter\" l'image avec le background via une propriétée nommée mix-blend-mode.\n// Elle mélange les couleurs de l'image avec les couleurs du background !\n// On en profite aussi pour augmenter le contraste de l'image et la passer en noir et blanc via filter, c'est plus joli !\n.accueil__image {\n    mix-blend-mode: luminosity;\n    filter: contrast(1) grayscale(1);\n}\n\n// Notre bouton musique contient un emoji\n// Le saviez-vous ? Comme un emoji est du texte, il est possible de changer sa taille via font-size\n// Et pour qu'il soit bien visible, on lui ajouter une animation précédemment déclarée dans /config.scss\n.bouton-musique {\n    background: none;\n    border: none;\n    cursor: pointer;\n    font-size: 3rem;\n    animation: pulse 0.75s ease-out infinite normal;\n}\n\n// Cette classe n'est utilisée que sur une image et la met en position absolue\n// Cela veut dire qu'elle va aller s'ancrer à un parent (ici la classe tableau)\n// Mettre top, left, bottom et right à 0 signifie que l'image sera centrée horizontalement et verticalement.\n.snoop-dog {\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    height: 100%;\n    margin: auto;\n}","// Il arrive parfois qu'on doive changer via le JavaScript l'état dans lequel un élément se trouve.\n// C'est une bonne pratique d'utilise des data-attribute pour ce faire et il est possible de les styliser en CSS.\n// Ainsi au lieu d'ajouter des classes comme \"visible\" ou \"flip\" on détecte l'état du HTML et on le style en conséquence.\n\n[data-visible=\"false\"] {\n    display: none;\n}\n\n[data-visible=\"true\"] {\n    display: initial;\n}\n\n[data-flipped=\"false\"] {\n    opacity: 0;\n}\n\n[data-flipped=\"true\"] {\n    opacity: 1;\n}"]}